/*
*Operating Systems 3 - Assessed Exercise 1
*
*@author Irina Preda
*@date 05/03/2014
*
*A program that defines the interface to the DiskDriver module 
*that mediates access to a disk device
*
*/
#include "freesectordescriptorstore_full.h"
#include "sectordescriptorcreator.h"
#include "sectordescriptor.h"
#include "block.h"
#include "pid.h"
#include "freesectordescriptorstore.h"
#include "diskdevice.h"
#include "diskdevice_full.h"
#include "voucher.h"
#include "diskdriver.h"
#include <pthread.h>
#include "generic_oneandhalfendedlist.h"
#include "BoundedBuffer.h"
#include <stdio.h>
#include <stdlib.h>
//data structures

DiskDevice disk_device;
BoundedBuffer bb_read;
BoundedBuffer bb_write;

pthread_mutex_t mutex;
pthread_cond_t cond;

void* thread_write(){

	while(1){
		blockingWriteBB(bb_write, (SectorDescriptor *) sd);
		//int check = 
		write_sector(disk_device,(SectorDescriptor *) sd);
	}
}

void* thread_read(){

	while(1){
		SectorDescriptor sd = blockingReadBB(bb_read);
		read_sector(disk_device,(SectorDescriptor *)sd);
	}
}

/*
 * called before any other methods to allow you to initialize data
 * structures and to start any internal threads.
 *
 * Arguments:
 *   dd: the DiskDevice that you must drive
 *   mem_start, mem_length: some memory for SectorDescriptors
 *   fsds_ptr: you hand back a FreeSectorDescriptorStore constructed
 *             from the memory provided in the two previous arguments
 */
void init_disk_driver(DiskDevice dd, void *mem_start, unsigned long mem_length,
		      FreeSectorDescriptorStore *fsds_ptr){

	disk_device = dd;

	// will need to use FreeSectorDescriptorStore facilities
	fsds_ptr = create_fsds();

	// populate it with SectorDescriptors created from a memory range
	create_free_sector_descriptors(&fsds_ptr, mem_start, mem_length);

	bb_read = createBB(1000);
	bb_write = createBB(1000);

	pthread_t thread_id_r;
	if(pthread_create(&thread_id_r,NULL,thread_read,NULL)){
		// an error occured
		perror("Error creating first thread\n"); 
		//exit(1); 
	} 

	pthread_t thread_id_w;
	if(pthread_create(&thread_id_w,NULL,thread_write,NULL)){
		// an error occured
		perror("Error creating second thread\n"); 
		//exit(1); 
	} 

//	pthread_join(thread_id_r, NULL); /* wait for thread 1 to finish */ 
//	pthread_join(thread_id_w, NULL); /* wait for thread 2 to finish */

}

/*
 * the following calls are used to write a sector to the disk
 * the nonblocking call must return promptly, returning 1 if successful at
 * queueing up the write, 0 if not (in case internal buffers are full)
 * the blocking call will usually return promptly, but there may be
 * a delay while it waits for space in your buffers.
 * neither call should delay until the sector is actually written to the disk
 * for a successful nonblocking call and for the blocking call, a voucher is
 * returned that is required to determine the success/failure of the write
 */
void blocking_write_sector(SectorDescriptor sd, Voucher *v){

	blockingWriteBB(bb_write, (SectorDescriptor *) sd);
	redeem_voucher(v,sd);
}

int nonblocking_write_sector(SectorDescriptor sd, Voucher *v){
	
	if(!nonblockingWriteBB(bb_write,(SectorDescriptor *) sd)) return 0;
	redeem_voucher(v,sd);
	return 1;
}

/*
 * the following calls are used to initiate the read of a sector from the disk
 * the nonblocking call must return promptly, returning 1 if successful at
 * queueing up the read, 0 if not (in case internal buffers are full)
 * the blocking callwill usually return promptly, but there may be
 * a delay while it waits for space in your buffers.
 * neither call should delay until the sector is actually read from the disk
 * for successful nonblocking call and for the blocking call, a voucher is
 * returned that is required to collect the sector after the read completes.
 */
void blocking_read_sector(SectorDescriptor sd, Voucher *v){
	
	blockingWriteBB(bb_write, (SectorDescriptor *) sd);
	redeem_voucher(v,sd);
}

int nonblocking_read_sector(SectorDescriptor sd, Voucher *v){

	if(!nonblockingReadBB(bb_read,(SectorDescriptor *) sd))	return 0;
	redeem_voucher(v,sd);
	return 1;
}

/*
 * the following call is used to retrieve the status of the read or write
 * the return value is 1 if successful, 0 if not
 * the calling application is blocked until the read/write has completed
 * if a successful read, the associated SectorDescriptor is returned in sd
 */

int redeem_voucher(Voucher v, SectorDescriptor *sd){
    int result = 0;
    
    if (v == NULL){
        printf("Driver: null voucher redeemed!\n");
        return 0;
    }
    
    pthread_mutex_destroy(&mutex);
    pthread_cond_destroy(&cond);

    return result;
}

